#!/bin/bash
# Backup Nginx, modules, static data, and dependencies (libraries)
set -e

# ====== Colors ======
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
MAGENTA='\033[1;35m'
NC='\033[0m'

# ====== Defaults ======
EXCLUDES=()
NGINX_BIN="/usr/sbin/nginx"
WORK_DIR="/tmp/nginx-backup"
DATE_STR=$(date +%Y%m%d)
HOSTNAME=$(hostname -s)
NGINX_VERSION=$($NGINX_BIN -v 2>&1 | grep -o '[0-9.]\+' | head -1)
BACKUP_NAME="nginx-backup-${HOSTNAME}-nginx${NGINX_VERSION}-${DATE_STR}.tar.gz"
BACKUP_TAR="/tmp/${BACKUP_NAME}"

# ====== Helpers ======
echo_color() { echo -e "${1}${2}${NC}"; }
step()       { echo_color "$YELLOW" "[Step $1] $2"; }
success()    { echo_color "$GREEN" "[✔] $1"; }
warning()    { echo_color "$YELLOW" "[⚠] $1"; }
error_exit() { echo_color "$RED" "[✖] $1"; exit 1; }

print_help() {
cat <<EOF
Usage: $0 [options]

Options:
  --output <file>     Specify output tar.gz file (default: /tmp/<auto-generated>)
  --exclude <path>    Exclude a directory from backup (can be used multiple times)
  --help              Show this help message

Examples:
  $0                                 # Default backup to /tmp/hostname-nginx<version>-YYYYMMDD.tar.gz
  $0 --output /tmp/mybackup.tar.gz   # Specify custom output location
  $0 --exclude /data/static          # Exclude directory from backup
  $0 --exclude /data/static --exclude /cache  # Exclude multiple directories

EOF
exit 0
}

# ====== Parse Arguments ======
while [[ $# -gt 0 ]]; do
  case "$1" in
    --output)
      BACKUP_TAR="$2"
      shift 2
      ;;
    --exclude)
      EXCLUDES+=("$2")
      shift 2
      ;;
    --help)
      print_help
      ;;
    *)
      echo_color "$RED" "Unknown argument: $1"
      print_help
      ;;
  esac
done

# ====== Step 1. Prepare workspace ======
step 1 "Ensuring backup directory exists..."
rm -rf "$WORK_DIR"
mkdir -p "$WORK_DIR"
success "Backup workspace ready"

# ====== Step 2. Backup nginx binary and modules ======
step 2 "Backing up nginx binary and modules..."
cp "$NGINX_BIN" "$WORK_DIR/"
mkdir -p "$WORK_DIR/modules"
cp -r /usr/lib64/nginx/* "$WORK_DIR/modules/" 2>/dev/null || warning "No modules found"
success "Binary and modules backed up"

# ====== Step 3. Backup nginx config ======
step 3 "Backing up nginx configuration..."
mkdir -p "$WORK_DIR/nginx-conf"
cp -r /etc/nginx/* "$WORK_DIR/nginx-conf/" 2>/dev/null || warning "No config found"
success "Configuration backed up"

# ====== Step 4. Backup static content (if not excluded) ======
STATIC_DIR="/data/static"
if [[ ! " ${EXCLUDES[@]} " =~ " $STATIC_DIR " ]]; then
  step 4 "Backing up static content..."
  mkdir -p "$WORK_DIR/static"
  cp -r $STATIC_DIR/* "$WORK_DIR/static/" 2>/dev/null || warning "No static files found"
  success "Static content backed up"
else
  warning "Excluded: $STATIC_DIR"
fi

# ====== Step 5. Backup systemd unit ======
step 5 "Backing up nginx systemd service..."
if [ -f "/usr/lib/systemd/system/nginx.service" ]; then
  cp /usr/lib/systemd/system/nginx.service "$WORK_DIR/"
  success "Systemd unit backed up"
else
  warning "Systemd unit not found"
fi

# ====== Step 6. Backup shared libraries ======
step 6 "Backing up nginx dependencies..."
mkdir -p "$WORK_DIR/libs"
ldd "$NGINX_BIN" | awk '{print $3}' | while read -r lib; do
  [ -f "$lib" ] && cp "$lib" "$WORK_DIR/libs/"
done
success "Shared libraries backed up"

# ====== Step 7. Create tarball ======
step 7 "Creating backup archive..."
tar czf "$BACKUP_TAR" -C /tmp nginx-backup
success "Backup archive created"

# ====== Step 8. Cleanup ======
step 8 "Cleaning up temporary files..."
rm -rf "$WORK_DIR"
success "Temporary files cleaned"

# ====== Final Output ======
echo -e "${MAGENTA}\n[✔] NGINX BACKUP COMPLETE"
echo -e "     ➤ Backup file: ${BACKUP_TAR}${NC}\n"
